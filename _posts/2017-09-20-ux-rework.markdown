---
title: "Mobile app UX rework"
layout: post
date: 2016-11-20 14:50
image: /assets/images/prodigy/logo.jpg
headerImage: true 
wide: true
tag:
- Design
- CSS
- Mobile UX
- Ionic
category: project
subCategory: web
---

<style>
 .diagram{
	 width:100%;
	 max-width:640px; 
	 display:block;
	 margin: 0 auto;
 }
</style>


## When
Aug 2016 - Dec 2016

## What
After my [dissertation project](/Dissertation-project) was complete and a working prototype for the app delivered, I began full time employment with Clarity, during the first few months of which I re-designed the UX and polished the edges of this prototype. I created a new app using __Ionic 2__ *(Typescript, Angular 2, Ionic Sass)* upon its release when there was limited documentation, experimenting and finding things out the hard way with this great new framework. I highly rate [Ionic](https://ionicframework.com/); it has a fantastic, dilligent team and allows you to simply create cross platform apps while utilising of a large number of native components!  


## Development

### Methodology
As a working prototype had already been created, I knew all the features this new version would need to contain and so worked through the app iteratively, spending extra time where I seen fit.  
__*NB*__: Unfortunately I could not provide more screenshots as the API for the app and test data had been removed at the time of writing  

### Re-vamping the landing pages
The <a href="/assets/videos/pp-ui-rework.mp4" class="html5lightbox">video</a> below shows a demo of the intro, login, home and search pages. Note that the API for the data has been deprecated so we are without the ability to pull the content, and without it my in built storage services dont work, meaning the search page does not show previously viewed or hot topics by default as it would in a live version and there are no topics to list on the home page... but you can get the gist.  

<a href="/assets/videos/pp-ui-rework.mp4" class="html5lightbox">
  <img src="/assets/images/diss/play-pp-ui-rework.jpg" class="centered" />
</a>

__Some features here:__  

 - Responsive design accomodating various screen sizes, using cleanly structured Scss. Handling overwriting of base Ionic styling
 - Css animations: To spice up page transitions and to give pages a bit of life I added various <a href="/assets/images/prodigy/animations1.png" class="html5lightbox" data-group="animations" title="Register animations">CSS keyframe animations</a><a href="/assets/images/prodigy/animations2.png" class="html5lightbox" data-group="animations" title="Homepage animations"></a>
 - Homepage loads and stores all topics in memory, utilising <a href="/assets/images/prodigy/sortByPropertyPipe.png" class="html5lightbox" data-group="pipes1" title="Sort by propety pipe">custom Angular pipes</a><a href="/assets/images/prodigy/topicsPipe.png" class="html5lightbox" data-group="pipes1" title="Topics pipe"></a> to sort and present correct lists to the user in topic and speciality tabs 

### Search page

The search page is modelled from Googles [in-app search specifications](https://material.io/guidelines/patterns/search.html#search-in-app-search). When search is opened, the results show previous searches and bookmarked items, and as the user begins to search, the potential search results (topics and specialities) are filtered and the search substring highlighted. The search utilises a number of pieces of functionality:

 - <a href="/assets/images/prodigy/nativeStorage.png" class="html5lightbox" title="Native storage service">Native storage services</a> using [Ionic native storage](https://ionicframework.com/docs/native/native-storage/) to store bookmarks and recent searches, in order to improve the UX to frequent results
 - <a href="/assets/images/prodigy/searchStringPipe.png" class="html5lightbox" data-group="pipes2"  title="Search by string pipe">Custom Angular pipes</a><a href="/assets/images/prodigy/highlightPipe.png" class="html5lightbox" data-group="pipes2" title="Highlight substring pipe"></a> to search, filter, order and neatly display the most relevant search results from a variety of sources
 - CSS animations to provide a sleek feel to the search experience


### Nested topic navigation and displaying deeply nested content 

__Problem 1.0: Displaying nested content__  
The content for these topics comes in the form of a nested tree structure, with nodes that could potentially be infinitely deep (although usually are only 4-5 layers). Providing a good way to handle inner topic navigation can be tricky, as well as handling this tree structure in a neat side-menu interface.  

__Solution:__ Recursively called partial components displaying each node and its children   

- For the side menu
    - <a href="/assets/images/prodigy/topicNavMenu.png" class="html5lightbox" data-group="navMenu"  title="Topic nav menu call">Recursive navigation nodes</a><a href="/assets/images/prodigy/topicNavNested.png" class="html5lightbox" data-group="navMenu" title="Recursive menu call"></a> which contain properties which set their style (active, child of active etc)  
    - When a node is selected it emits an event that is <a href="/assets/images/prodigy/selectNode.png" class="html5lightbox" title="Node selected">handled by the controller</a> which sets up the properties on the nodes for styling purposes  
- For the content
	- Recursive content display nodes, developed much like the above, displaying a bespoke grouping of information when a node at each level is selected
	- Topic controller <a href="/assets/images/prodigy/itemSelected.png" class="html5lightbox" title="Itme selected">subscribes</a> to an observable which lets it know when a node has been selected, and it presents content accordingly

__Problem 1.1: Communicating navigation menu with content__  
Ionics side menu (where the topics navigation menu resides) must be defined from the root component as it is static and not unique to each navigated page. Therefore there needed to be some service which could communicate with both components, and retain the current state of the menu.

__Solution:__ I set up <a href="/assets/images/prodigy/navStateInterface.png" class="html5lightbox" data-group="navState" title="Nav state interface">a navigation 'state'</a><a href="/assets/images/prodigy/navStateObjects.png" class="html5lightbox" data-group="navState" title="Nav state objects"></a> to provide a layer of communication between the root component and the topic view page. It has a method which is able to be called from the recursive navigation nodes via the root component which selects the item

__Problem 2: Accounting for deep inter-topic navigation__  
Each of the CKS topics can link to one another, which should be ok... however as with the problem in 1.1, we can't just create a new side menu for the new topic because it is a static menu. So we needed to find a way to update this menu when each topic is navigated to.

__Solution:__ Persisting an array of menu objects in the navigation state, managed from the [ionic lifecycle hooks](https://ionicframework.com/docs/api/navigation/NavController/) on the topic component

 - <a href="/assets/images/prodigy/topicLifecycleDidLoad.png" class="html5lightbox" data-group="lifecycle" title="IonViewDIdLoad">Implemented a number of lifecycle hooks</a><a href="/assets/images/prodigy/topicLifecycleEnter.png" class="html5lightbox" data-group="lifecycle" title="WillEnter"></a><a href="/assets/images/prodigy/topicLifecycleLeave.png" class="html5lightbox" data-group="lifecycle" title="Ion view Leave"></a><a href="/assets/images/prodigy/navStateObjects.png" class="html5lightbox" data-group="lifecycle" title="Menu commands"></a> which communicated with <a href="/assets/images/prodigy/navStateInterface.png" class="html5lightbox" title="Nav observables">observables on the state</a> to manage the current menu state









